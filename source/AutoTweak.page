Menu="Utilities"
Title="AutoTweak"
Icon="autotweak.png"
Tag="icon-log"
---
<?php
/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * For the complete terms of the GNU General Public License, please see this URL:
 * http://www.gnu.org/licenses/gpl-3.0.html
 *
 * Copyright (c) 2024, Peter Laszlo
 */
?>
<?
$plugin = "autotweak";

function parse_autotweak_cfg($plugin) {
    global $docroot;
    $def = "$docroot/plugins/$plugin/default.cfg";
    $flash = "/boot/config/plugins/$plugin/$plugin.cfg";
    $cfg = file_exists($def) ? parse_ini_file($def) : [];
    return file_exists($flash) ? array_replace_recursive($cfg, parse_ini_file($flash)) : $cfg;
}

$cfg = parse_autotweak_cfg($plugin);

?>

:autotweak_main_plug:
> This plugin enables you to adjust your Unraid system's power profile to enhance performance or improve energy efficiency. 
> Additionally, it fine-tunes the TCP stack settings and network interface card (NIC) interrupt affinities to optimize network performance. 
> Please note: This plugin is not compatible with other plugins that alter the same settings.
:end

<div class='spinner' style='display:none'></div>

<form markdown="1" name="autotweak" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?php echo $plugin; ?>/<?php echo $plugin; ?>.cfg">
<input type="hidden" name="#command" value="/plugins/<?php echo $plugin; ?>/scripts/<?php echo $plugin; ?>">
<input type="hidden" name="#arg[1]" value="apply">
<input type="hidden" name="NIC_IRQ_BANNED" value="<?=$cfg['NIC_IRQ_BANNED']?>">
<input type="hidden" name="PCI_PM_BANNED" value="<?=$cfg['PCI_PM_BANNED']?>">

_(Power Profile)_:
: <select name="POWER_PROFILE">
    <?=mk_option($cfg['POWER_PROFILE'], "performance", "_(Performance)_");?>
    <?=mk_option($cfg['POWER_PROFILE'], "balanced", "_(Balanced)_");?>
    <?=mk_option($cfg['POWER_PROFILE'], "powersave", "_(Power Save)_");?>
    <?=mk_option($cfg['POWER_PROFILE'], "powersupersave", "_(Power Super Save)_");?>
  </select>

:autotweak_power_profile_plug:
> Select the power profile for your system. By selecting a profile, you can influence the balance between performance and power consumption according to your needs or preferences.
:end


_(ASPM Policy)_:
: <select name="ASPM_POLICY">
    <?=mk_option($cfg['ASPM_POLICY'], "default", "_(BIOS Default)_");?>
    <?=mk_option($cfg['ASPM_POLICY'], "performance", "_(Performance: ASPM Disabled)_");?>
    <?=mk_option($cfg['ASPM_POLICY'], "powersave", "_(Power Save: ASPM L0s L1)_");?>
    <?=mk_option($cfg['ASPM_POLICY'], "powersupersave", "_(Power Super Save: ASPM L0s L1 L1+)_");?>
  </select>

:autotweak_aspm_policy_plug:
> This setting allows you to configure the Active State Power Management (ASPM) policy for PCIe devices. 
> ASPM is a power management feature that adjusts the power usage of PCIe devices based on system activity and can significantly reduce power consumption when enabled.
> Select a policy from the options below to define how the ASPM should behave. 
> Please note that modifying this setting may impact the performance and power consumption of your PCIe devices. Make sure to understand the implications of each policy before applying the changes.
> Warning: Be aware that changing the ASPM policy can affect system stability and performance. It is recommended to monitor the system after applying any changes and revert back if any undesirable behavior is observed.
:end

_(PCI PM Control)_:
: <select name="PCI_PM_CONTROL">
    <?=mk_option($cfg['PCI_PM_CONTROL'], "default", "_(OS Default)_");?>
    <?=mk_option($cfg['PCI_PM_CONTROL'], "auto", "_(Enable)_");?>
    <?=mk_option($cfg['PCI_PM_CONTROL'], "on", "_(Disable)_");?>
  </select>

:autotweak_pci_pm_control_plug:
> This setting allows you to set the power control state for PCI devices on your system. 
> If enabled the system automatically adjusts the power state of the PCI devices based on the current usage and activity, optimizing for energy efficiency without significantly compromising performance.
> If disabled the PCI devices are kept in their maximum power state to ensure maximum performance, regardless of usage or activity.
> Please note that changes will take effect immediately and will apply to all compatible PCI devices detected by the system.
> Warning: Be aware that changing this setting can affect system stability and performance. It is recommended to monitor the system after applying any changes and revert back if any undesirable behavior is observed.
:end

_(PM Control on SATA ports)_:
: <select name="SATA_PM_CONTROL">
    <?=mk_option($cfg['SATA_PM_CONTROL'], "default", "_(OS Default)_");?>
    <?=mk_option($cfg['SATA_PM_CONTROL'], "auto", "_(Enable)_");?>
    <?=mk_option($cfg['SATA_PM_CONTROL'], "on", "_(Disable)_");?>
  </select>

:autotweak_sata_pm_control_plug:
> This setting allows you to set the power control state for SATA ports on your system. 
> If enabled the system automatically adjusts the power state of the SATA ports based on the current usage and activity, optimizing for energy efficiency without significantly compromising performance.
> If disabled the SATA ports are kept in their maximum power state to ensure maximum performance, regardless of usage or activity.
> Please note that changes will take effect immediately and will apply to all SATA port detected by the system.
> Warning: Be aware that changing this setting can affect system stability and performance. It is recommended to monitor the system after applying any changes and revert back if any undesirable behavior is observed.
:end

_(SATA Link Power Management)_:
: <select name="SATA_LINK_PM">
    <?=mk_option($cfg['SATA_LINK_PM'], "max_performance", "_(Performancce)_");?>
    <?=mk_option($cfg['SATA_LINK_PM'], "med_power_with_dipm", "_(Balanced)_");?>
    <?=mk_option($cfg['SATA_LINK_PM'], "min_power", "_(Powersave)_");?>
  </select>

:autotweak_sata_link_pm_plug:
> This setting allows you to set the SATA link power management policy on your system. 
> By adjusting this policy, you can optimize the balance between power conservation and disk performance. 
> The setting directly influences how aggressively your system saves power on SATA interfaces when they are not actively in use.
> Available Options:
> Performance: This policy keeps the SATA link in an active state, prioritizing performance over power saving. It is suitable for environments where disk performance is critical and power usage is a secondary concern.
> Balanced: An intermediate option that provides a balance between power saving and performance. The link is allowed to enter a partial power-saving state when idle.
> Powersave: Maximizes power savings by allowing the SATA link to enter a minimal power consumption state when not in active use. This option is ideal for systems where energy efficiency is paramount.
> Warning: Be aware that changing this setting can affect system stability and performance. It is recommended to monitor the system after applying any changes and revert back if any undesirable behavior is observed.
:end

_(Tweak NIC interrupt/queue affinities)_:
: <select name="TWEAK_NIC_IRQ">
    <?=mk_option($cfg['TWEAK_NIC_IRQ'], "enable", "_(Enable)_");?>
    <?=mk_option($cfg['TWEAK_NIC_IRQ'], "disable", "_(Disable)_");?>
  </select>

:autotweak_tweak_nic_irq_plug:
> This setting allows you to enable or disable the NIC intterupt/queue affinitie optimization feature. 
> Modern NICs support hardware queues, which can improve network traffic processing by distributing it across multiple CPUs.
> This feature is designed to optimize these by assigning different hardware queues (and their corresponding interrupts) to various CPUs. 
> Additionally, for systems with hybrid CPUs, it aims to allocate these to E-cores. 
> It also enables the Transmit Packet Steering (XPS) feature in the kernel to further enhance network performance.
:end

_(Tweak TCP settings)_:
: <select name="TWEAK_TCP">
    <?=mk_option($cfg['TWEAK_TCP'], "enable", "_(Enable)_");?>
    <?=mk_option($cfg['TWEAK_TCP'], "disable", "_(Disable)_");?>
  </select>

:autotweak_tweak_tcp_plug:
> This setting allows you to enable or disable the TCP optimization feature. 
> If enabled it sets some TCP buffer size parameters based on the maximum physical interface speed detected in the system.
:end

_(Tweak Housekeeping)_:
: <select name="TWEAK_HK">
    <?=mk_option($cfg['TWEAK_HK'], "enable", "_(Enable)_");?>
    <?=mk_option($cfg['TWEAK_HK'], "disable", "_(Disable)_");?>
  </select>

:autotweak_tweak_tcp_plug:
> This setting allows you to enable or disable the Housekeeping optimization feature. 
> If enabled offloads kernel housekeeping task (RCU callbacks) from interrupts into threads.
> It also moves all interrupt processing on to E-cores on Hybrid CPUs. This step aims to ensure that housekeeping tasks do not interfere excessively with the performance cores.
> A system reboot is necessary for the changes to take effect.
:end

<div class="title"><span class="left"><i class="fa fa-cog title"></i>Advanced settings</span></div>

_(NMI Watchdog)_:
: <select name="KERNEL_NMI_WATCHDOG">
    <?=mk_option($cfg['KERNEL_NMI_WATCHDOG'], "default", "_(Enable: Kernel Default)_");?>
    <?=mk_option($cfg['KERNEL_NMI_WATCHDOG'], "off", "_(Disable)_");?>
  </select>

:autotweak_nmi_watchdogs_plug:
> This setting allows you to disable the Non-Maskable Interrupt (NMI) watchdog on your system. 
> The NMI watchdog is a hardware feature that helps in detecting system lockups by generating a non-maskable interrupt when the system does not respond within a specified period. 
> However, in stable environments where such lockups are unlikely, disabling the NMI watchdog can reduce power consumption by decreasing unnecessary CPU wake-ups.
> A system reboot is necessary for the changes to take effect.
:end

_(Realtek RTL8125/RTL8126 ASPM Control)_:
: <select name="R8125_ASPM">
    <?=mk_option($cfg['R8125_ASPM'], "enable", "_(Enable)_");?>
    <?=mk_option($cfg['R8125_ASPM'], "disable", "_(Disable)_");?>
  </select>

:autotweak_r8125_aspm_plug:
> If you have installed the Realtek RTL8125 drivers, this setting allows you to enable or disable the ASPM (Active State Power Management) feature for the RTL8125 network interface cards in your system. 
> Selecting 'Enable' activates the ASPM feature, potentially reducing power consumption when the network activity is low.
> A system reboot is necessary for the changes to take effect.
:end

_(Realtek RTL8168/RTL8111 ASPM Control)_:
: <select name="R8168_ASPM">
    <?=mk_option($cfg['R8168_ASPM'], "enable", "_(Enable)_");?>
    <?=mk_option($cfg['R8168_ASPM'], "disable", "_(Disable)_");?>
  </select>

:autotweak_r8168_aspm_plug:
> If you have installed the Realtek RTL8168/RTL1111 drivers, this setting allows you to enable or disable the ASPM (Active State Power Management) feature for the RTL8168/RTL1111 network interface cards in your system. 
> Selecting 'Enable' activates the ASPM feature, potentially reducing power consumption when the network activity is low.
> A system reboot is necessary for the changes to take effect.
:end

_(Preferred C states on Alder Lake CPUs)_:
: <select name="KERNEL_PREFERRED_CSTATES">
    <?=mk_option($cfg['KERNEL_PREFERRED_CSTATES'], "default", "_(OS Default)_");?>
    <?=mk_option($cfg['KERNEL_PREFERRED_CSTATES'], "2", "_(Prefer C1)_");?>
    <?=mk_option($cfg['KERNEL_PREFERRED_CSTATES'], "4", "_(Prefer C1E)_");?>
  </select>

:autotweak_preferred_c_states_plug:
> The C1 and C1E states on Alder Lake CPUs are mutually exclusive. Only one of them can be enabled at one time. By default the kernel disables C1 state.
> This setting allows you to enable C1 state and disable C1E state. 
> Please note that this adjustment directly alters the kernel boot parameters. A system reboot is necessary for the changes to take effect.
:end

_(Security Mitigations)_:
: <select name="KERNEL_MITIGATIONS">
    <?=mk_option($cfg['KERNEL_MITIGATIONS'], "default", "_(Enable: Kernel Default)_");?>
    <?=mk_option($cfg['KERNEL_MITIGATIONS'], "off", "_(Disable)_");?>
  </select>

:autotweak_security_mitigations_plug:
> This setting allows you to disable various CPU security mitigations that are in place to protect against known vulnerabilities such as Spectre and Meltdown.
> While disabling these mitigations can improve system performance, it is important to understand that this may expose your CPU to potential security risks.
> Use this option only if you are aware of the security implications and have measures in place to mitigate potential threats. 
> Please note that this adjustment directly alters the kernel boot parameters. A system reboot is necessary for the changes to take effect.
:end

_(PC10 Magic Hack)_:
: <select name="PC10_LTR_HACK">
    <?=mk_option($cfg['PC10_LTR_HACK'], "default", "_(Off)_");?>
    <?=mk_option($cfg['PC10_LTR_HACK'], "on", "_(On)_");?>
  </select>

:autotweak_pc10_ltr_hack_plug:
> Activating this setting may or may not offer a potential solution to achieve PC10, its effectiveness is not guaranteed.
> This setting should be your last resort after exhausting all other standard power-saving measures.
> This setting is designed for users who have thoroughly explored and applied all standard power management settings, ensured Active State Power Management (ASPM) is functioning correctly,
> and experimented with various BIOS configurations yet still find their system unable to achieve PC10 power state. 
> Check the system log to verify the successful application of this setting.
> Warning: Be aware that changing this setting can affect system stability and performance.
:end

<input type="submit" value="Apply">
<input type="button" value="Done" onclick="done()">
</form>


<div class="title"><span class="left"><i class="fa fa-terminal title"></i>ASPM and PCIe PM status</span></div>

<?

$output = shell_exec("bash -c " . escapeshellarg("lspci -vv 2>/dev/null | awk '/D3hot\+|ASPM/{print $0}' RS= | grep -P '(^[a-z0-9:.]+|Flags:|Status:.*PME-Enable|LnkCap:|LnkCtl:|LnkSta:|L1SubCap:|L1SubCtl1:)'"));
$lines = explode(PHP_EOL, $output);

echo "<pre>";
foreach ($lines as $line) {
    // Highlight words
    $line = preg_replace('/(ASPM L0s L1 Enabled|ASPM L1 Enabled)/i', '<span style="color: green; font-weight: bold;">$1</span>', $line);
    $line = preg_replace('/(ASPM Disabled)/i', '<span style="color: red; font-weight: bold;">$1</span>', $line);
    if (preg_match('/^\s*L1SubCap:/i', $line)) {
      $line = preg_replace('/(ASPM_L1\S*)/i', '<span style="color: orange; font-weight: bold;">$1</span>', $line);
    } 
    else if (preg_match('/^\s*L1SubCtl1:/i', $line)) {
      $line = preg_replace('/(ASPM_L1\S*+)/i', '<span style="color: green; font-weight: bold;">$1</span>', $line);      
      $line = preg_replace('/(ASPM_L1\S*-)/i', '<span style="color: red; font-weight: bold;">$1</span>', $line);      
    }
    else if (preg_match('/^\s*LinkCtl:/i', $line)) {
      $line = preg_replace('/(ASPM L1)(?=,)/i', '<span style="color: orange; font-weight: bold;">$1</span>', $line);
      $line = preg_replace('/(ASPM L0s L1)(?=,)/i', '<span style="color: orange; font-weight: bold;">$1</span>', $line);
      $line = preg_replace('/(ASPM not supported)/i', '<span style="color: red; font-weight: bold;">$1</span>', $line);
    }
    else if (preg_match('/^\s*Status:/i', $line)) {
      $line = preg_replace('/(D1[+-]*|D2[+-]*|D3[a-z+-]*)/i', '<span style="color: green; font-weight: bold;">$1</span>', $line);
      $line = preg_replace('/(D0[+-]*)/i', '<span style="color: orange; font-weight: bold;">$1</span>', $line);
    }
    else {
      $line = preg_replace('/(D0[+-]*|D1[+-]*|D2[+-]*|D3[a-z+-]*)/i', '<span style="color: orange; font-weight: bold;">$1</span>', $line);
    }
    // Make it easier to read
    $line = preg_replace('/(LnkCap:\s*)/i', 'Capabilities: ', $line);
    $line = preg_replace('/(LnkCtl:\s*)/i', 'Settings: ', $line);
    $line = preg_replace('/(LnkSta:\s*)/i', 'Status: ', $line);
    $line = preg_replace('/(L1SubCap:\s*)/i', 'ASPM Capabilities: ', $line);
    $line = preg_replace('/(L1SubCtl1:\s*)/i', 'ASPM Settings: ', $line);

    echo $line . "<br>";
}
echo "</pre>";

?>